@page "/results"
@using LinqWork.Data;
@using Microsoft.EntityFrameworkCore
@inject DataDbContext _db

<h3>Results</h3>
@if (ClassesWithMore != null && ClassesWithMore.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Class Name</th>
                <th>Room Number</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var info in ClassesWithMore)
            {
                <tr>
                    <td>@info.ClassName</td>
                    <td>@info.RoomNumber</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No classes with more than 100 students found.</p>
}



<h3>Students with No Classes in Department 22</h3>

@if (studentsWithNoClasses != null && studentsWithNoClasses.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Student ID</th>
                <th>Major</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var studentInfo in studentsWithNoClasses)
            {
                <tr>
                    <td>@studentInfo.StudentId</td>
                    <td>@studentInfo.Major</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No students found who take no classes with teachers in department 22.</p>
}

@code {
    List<Class> ClassesWithMore = new List<Class>();
    List<Student> studentsWithNoClasses = new List<Student>();
    protected override void OnInitialized()
    {
        ClassesWithMore = _db.Classes.Where(c => _db.Enrolled.Count(x => x.ClassId == c.ClassId) > 3).ToList();
        studentsWithNoClasses = _db.Students
            .Include(s => s.Enrolled)
            .ThenInclude(e => e.Class)
            .ThenInclude(c => c.Faculty)
            .Where(s => !s.Enrolled.Any(e => e.Class.Faculty.DeptId == 22)).ToList();
    }
}
